package interview.easy2;

import org.junit.Test;

import java.sql.Time;
import java.util.Timer;

/**
 * Created by Administrator on 2018/7/9 0009.
 */
public class Solution453 {
    public int findIndexOfMaxNumber(int[] nums){
        int max = Integer.MIN_VALUE;
        int maxIndex = -1;
        for(int i = 0;i < nums.length; i++){
            if(nums[i] > max){
                max = nums[i];
                maxIndex = i;
            }
        }
        return  maxIndex;
    }

    public  boolean check(int[] nums){
        for(int i = 1; i < nums.length; i++){
            if(nums[i] != nums[0]){
                return  false;
            }
        }

        return  true;
    }
    //recursive version ------. stackoverflow
    public int minMoves(int[] nums){
        if(check(nums)){
            return  0;
        }
        int maxIndex = findIndexOfMaxNumber(nums);
        for(int i = 0; i < nums.length; i++){
            if(i != maxIndex){
                nums[i]++;
            }
        }

        return  1 + minMoves(nums);
    }

    public int minMoves1(int[] nums){
        int step = 0;

        while (!check(nums)){
            step++;
            int maxIndex = findIndexOfMaxNumber(nums);
            for(int i = 0; i < nums.length; i++){
                if(i != maxIndex){
                    nums[i]++;
                }
            }
        }
        return  step;
    }

    public int[] findMaxAndSecond(int[] nums){
        int maxValue = Integer.MIN_VALUE;
        int minValue = Integer.MAX_VALUE;
        int maxIndex = -1;
        for(int i = 0;i < nums.length; i++){
            if(nums[i] > maxValue){
                maxValue = nums[i];
                maxIndex = i;
            }
        }
        for(int j = 0; j < nums.length; j++){
            if(nums[j] < minValue){
                minValue = nums[j];
            }
        }

         return new int[]{maxValue, minValue, maxIndex};

    }

    //timeout
    public  int minMoves2(int[] nums){
        int step = 0;
        while (!check(nums)){
            int[] maxAndSecondValue = findMaxAndSecond(nums);
            step += maxAndSecondValue[0] - maxAndSecondValue[1];
            for(int i = 0; i < nums.length; i++){
                if(i != maxAndSecondValue[2]){
                    nums[i] += maxAndSecondValue[0] - maxAndSecondValue[1];
                }
            }
        }

        return  step;
    }
    // is math problem
    public  int minMoves3(int[] nums){
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
        }
        int minValue = Integer.MAX_VALUE;
        for(int j = 0; j < nums.length; j++){
            if(nums[j] < minValue){
                minValue = nums[j];
            }
        }

        return  sum - (minValue) * (nums.length );
    }

    @Test
    public  void test(){
        int[] nums = new int[]{62,-29,-51,60,91,-28,88,83,42,-11,8,-87,34,-62,27,4,
                -27,-63,-62,4,83,-33,-26,51,91,39,26,-55,-27,-46,-11,-64,25,-9,
                96,16,63,36,-1,-43,77,-93,-77,11,98,50,-85,-29,39,-94,28,22,-27,
                54,-74,-84,-7,52,-39,67,-94,3,-97,31,94,51,-53,9,-61,-2,66,
                -84,6,89,-20,-44,-9,-53,-21,82,-47,-93,-43,-22,61,-17,-5,-45,87,
                8,74,93,-89,29,-24,-95,-20,-25,-34,-29,73,-67,-13,-69,74,19,-13,
                -82,67,67,52,72,74,-91,-49,-12,-8,-2,-5,-21,-94,-31,-76,-82,98,-48,75,
                -70,27,-58,1,1,-73,40,-16,53,-40,72,23,79,39,-24,51,-35,-15,54,5,30,-48,
                -100,61,-41,-31,38,-71,-33,90,56,-51,18,50,50,71,77,-9,-45,-17,3,79,-94,-18,-30,
                -18,-67,-12,20,88,93,-98,92,46,63,-49,67,1,-68,-65,-56,89,-64,62,39,87,-15,
                -31,-70,-8,52,33,-28,10,-85,-6,45,-100,82,-83,40,28,-81,33,-26,34,36,-59,
                88,69,-72,-68,10,-35,46,-99,-96,-69,-30,-66,-25,74,19,47,-15,34,94,82,-14,
                76,99,-73,4,-82,12,30,4,-100,72,-8,69,52,-24,-69,-83,-78,-67,-79,-95,-45,
                -93,-19,-70,26,80,-33,-88,74,-51,-1,51,-100,-22,-93,-82,42,38,-26,42,-38,
                67,-36,-86,-57,-5,84,-34,-20,57,-77,36,65,4,18,-57,-15,85,-44,-89,86,7,14,86,37,
                22,56,-21,-88,-70,-79,-26,49,-63,-60,93,-15,-76,-89,65,82,86,-47,-1,-9,71,42,28,
                8,98,39,-54,-43,-46,84,94,28,-8,-27,40,23,-53,66,-76,-64,-94,-83,21,-69,80,-61,65,
                67,-8,-36,-90,-84,-94,-10,-24,57,-71,-25,66,-65,-41,61,15,52,86,-45,-73,85,73,-49,
                -78,80,-79,43,63,53,34,28,-28,79,92,-66,95,50,24,-77,-41,6,-2,-74,41,10,87,-43,-86,
                25,-36,-59,11,-62,-56,33,-82,-35,-72,33,71,63,-39,-57,-6,-95,-22,-11,7,-98,-36,67,
                -40,15,45,-98,77,-16,-89,91,-91,-25,84,-28,-35,-72,-95,-65,-54,86,68,-83,1,-71,-88,
                95,86,-58,-64,-6,97,-48,-87,-43,67,58,-41,44,-58,-78,35,-97,-2,-29,-24,15,0,-67,51,
                46,-81,19,15,-28,1,-21,-33,-13,22,-45,33,19,8,46,76,-25,4,88,72,-2,-90,-41,-46,-40,
                31,30,76,-69,63,27,29,35,98,96,-93,-1,-25,-73,87,97,-18,20,-32,90,-33,97,-82,23,85,
                90,74,47,-51,-72,60,32,10,-12,15,-75,-85,96,60,65,92,20,-35,-80,47,-48,-83,81,24,-62,
                24,43,-65,42,-81,-80,-16,93,19,-15,73,-21,-82,-17,67,33,8,34,30,-79,0,22,41,65,-6,-60,
                69,-36,73,-7,2,-3,89,37,91,-92,9,-25,-99,80,61,26,-40,79,-91,79,-36,-31,14,94,-10,66,-31,
                83,-17,63,75,-48,-73,49,-3,-19,98,-14,-82,90,-6,-21,-35,-53,-40,78,73,20,57,82,-49,-78,
                -96,65,68,-6,-17,-63,-70,66,53,-95,70,32,6,-32,-86,5,6,84,-5,-99,-36,12,-100,24,-9,74,
                96,-100,8,-53,74,12,65,43,59,-52,32,41,67,-63,-2,37,70,-95,57,84,10,-36,68,57,-83,84,
                -31,-83,8,12,43,-44,13,-48,-44,-13,16,-79,-70,-73,-79,15,20,88,52,-81,-22,22,-76,-65,
                -42,-14,-1,-73,-57,16,-89,-36,-14,-28,77,-71,28,-10,-67,36,77,2,57,60,-19,31,-25,-98,
                -29,-73,-79,49,50,97,85,60,-17,-64,87,26,5,51,90,91,75,19,-80,-45,-91,-94,92,39,8,1,-1,
                89,-68,74,91,-44,53,64,-95,-45,61,42,-84,-56,31,55,22,-64,6,-35,-73,-67,84,99,-11,46,57,
                -19,-15,-35,82,84,-93,67,10,98,-77,-85,15,80,-29,-24,-25,-61,-27,-94,94,95,-58,-47,-88,
                -79,-14,49,72,27,-5,30,-92,80,47,43,16,54,10,78,5,-15,93,-80,-35,-84,-52,-8,-93,21,-2,
                54,-31,-8,-93,-19,-35,-55,-70,-62,73,25,20,81,-43,-81,-24,73,74,38,3,-69,-77,-51,-97,
                -59,-83,-49,33,-75,73,-68,79,-58,-24,38,23,42,83,6,32,8,-69,-96,-58,-59,-77,18,-86,49,
                -43,-30,32,-20,19,35,-27,-12,87,-93,-35,60,91,-56,54,-33,34,-23,61,18,35,-55,-74,67,
                -51,-80,-92,-75,39,74,74,96,96,-41,-72,-33,94,-46,56,81,-39,-79,-7,-96,-82,-53,-77,52,
                -23,85,-78,-88,-70,-99,79,-68,-79,39,-43,60,-34,83,8,-38,-58,-11,30,-63,43,-14,70,56,
                -41,-36,12,-23,11,35,-70,88,-28,-96,-99,-45,-95,32,-13,-73,-76,44,39,-10,-21,-52,52,
                -26,-11,-18,11,84,20,-67,40,80,-3,-48,-91,61,39,91,49,-88,96,
                2,-33,-99,-65,54,80,-89,-50,20,1,-19,20,-47,55,-91,-12};
        long startTime = System.currentTimeMillis();
        int result = minMoves3(nums);
        long endTime = System.currentTimeMillis();
        System.out.println((endTime - startTime) + "ms");
        System.out.print(result);
    }
}

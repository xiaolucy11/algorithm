package algorithm.hard1;

import org.junit.Test;

import java.util.Stack;

/**
 * Created by youlu on 2018/12/11.
 */
public class Solution85 {

    public class Pair {
        int xLenght;
        int yLength;

        Pair() {
            xLenght = 0;
            yLength = 0;
        }

        Pair(int _x, int _y) {
            xLenght = _x;
            yLength = _y;
        }
    }

    //Wrong Solution
    /*
        pass 60/66 test case
     */
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        Pair[][] pairs = new Pair[matrix.length][matrix[0].length];

        for(int m = 0; m < matrix.length; m++){
            for(int n = 0; n < matrix[0].length; n++){
                pairs[m][n] = new Pair();
            }
        }

        if(matrix[0][0] == '1'){
            pairs[0][0].xLenght = 1;
            pairs[0][0].yLength = 1;
        }


        // by index 0 row
        for (int i = 1; i < matrix[0].length; i++) {
            if (matrix[0][i] == '1') {
                pairs[0][i].xLenght =  pairs[0][i-1].xLenght + 1;
                pairs[0][i].yLength = 1;
            }
        }

        // by 0 column
        for (int j = 1; j < matrix.length; j++) {
            if (matrix[j][0] == '1') {
                pairs[j][0].yLength = pairs[j-1][0].yLength + 1;
                pairs[j][0].xLenght = 1;
            }
        }


        for (int i = 1; i < matrix.length; i++) {
            for (int j = 1; j < matrix[0].length; j++) {
                if(matrix[i][j] == '1'){
                    pairs[i][j].xLenght = pairs[i][j-1].xLenght + 1;
                }
            }
        }

        for(int m = 1; m < matrix[0].length; m++){
            for(int n = 1; n < matrix.length; n++){
                if(matrix[n][m] == '1') {
                    pairs[n][m].yLength = pairs[n - 1][m].yLength + 1;
                }
            }
        }

        int maxArea = pairs[0][0].xLenght * pairs[0][0].yLength;
        Pair[][] rectangle = new Pair[matrix.length][matrix[0].length];
        for(int m = 0; m < matrix.length; m++){
            for(int n = 0; n < matrix[0].length; n++){
                rectangle[m][n] = new Pair();
            }
        }
        rectangle[0][0].xLenght = pairs[0][0].xLenght;
        rectangle[0][0].yLength = pairs[0][0].yLength;

        for(int i = 1; i < matrix[0].length; i++){
            rectangle[0][i].xLenght = pairs[0][i].xLenght;
            rectangle[0][i].yLength = 1;
            if(rectangle[0][i].yLength * rectangle[0][i].xLenght > maxArea){
                maxArea = rectangle[0][i].xLenght * rectangle[0][i].yLength;
            }
        }

        for(int j = 1; j < matrix.length; j++){
            rectangle[j][0].yLength =  pairs[j][0].yLength;
            rectangle[j][0].xLenght = 1;
            if(rectangle[j][0].xLenght * rectangle[j][0].yLength > maxArea){
                maxArea = rectangle[j][0].xLenght * rectangle[j][0].yLength;
            }
        }

        for(int i = 1; i < matrix.length; i++){
            for(int j = 1; j < matrix[0].length; j++){
                if(matrix[i][j] == '1'){
                    if(matrix[i-1][j] == '0' && matrix[i][j-1] == '0'){
                        rectangle[i][j].xLenght = 1;
                        rectangle[i][j].yLength = 1;
                    }else if(matrix[i-1][j] == '0' && matrix[i][j-1] == '1'){
                        rectangle[i][j].xLenght = pairs[i][j].xLenght ;
                        rectangle[i][j].yLength = 1;
                    }else if(matrix[i-1][j] == '1' && matrix[i][j-1] == '0'){
                        rectangle[i][j].yLength = pairs[i][j].yLength ;
                        rectangle[i][j].xLenght = 1;
                    }else {
                         if(matrix[i-1][j-1] == '0'){
                             if(pairs[i][j].xLenght > pairs[i][j].yLength){
                                 rectangle[i][j].xLenght = pairs[i][j].xLenght;
                                 rectangle[i][j].yLength = 1;
                             }else {
                                 rectangle[i][j].xLenght = 1;
                                 rectangle[i][j].yLength = pairs[i][j].yLength;
                             }
                         }else {
                             int mAY = (j-1) - rectangle[i-1][j-1].xLenght + 1;
                             int mAX = (i-1) - rectangle[i-1][j-1].yLength + 1;

                             int mBY = (j-1) - rectangle[i][j-1].xLenght + 1;
                             int mBX = i - rectangle[i][j-1].yLength + 1;

                             int mCY = j - rectangle[i-1][j].xLenght + 1;
                             int mCX = (i-1) - rectangle[i-1][j].yLength + 1;

                             int mDX = Math.max(mAX, mCX);
                             int mDY = Math.max(mAY, mBY);
                             rectangle[i][j].yLength = i - mDX + 1;
                             rectangle[i][j].xLenght = j - mDY + 1;

                         }
                    }

                }
                if(rectangle[i][j].xLenght * rectangle[i][j].yLength > maxArea){
                    maxArea = rectangle[i][j].xLenght * rectangle[i][j].yLength;
                    System.out.println("i = " + i + "  j =  " + j + "  " + maxArea);
                }
                maxArea = Math.max(maxArea, pairs[i][j].xLenght);
                maxArea = Math.max(maxArea, pairs[i][j].yLength);
            }
        }

        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }


        return maxArea;
    }

    public int largestRectangleArea(int[] height) {
        int len = height.length;
        Stack<Integer> s = new Stack<Integer>();
        int maxArea = 0;
        for(int i = 0; i <= len; i++){
            int h = (i == len ? 0 : height[i]);
            if(s.isEmpty() || h >= height[s.peek()]){
                s.push(i);
            }else{
                int tp = s.pop();
                maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));
                i--;
            }
        }
        return maxArea;
    }


    //Accepted ----50ms
    public int maximalRectangle1(char[][] matrix){
        if(matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        Pair[][] pairs = new Pair[matrix.length][matrix[0].length];

        for(int m = 0; m < matrix.length; m++){
            for(int n = 0; n < matrix[0].length; n++){
                pairs[m][n] = new Pair();
            }
        }

        if(matrix[0][0] == '1'){
            pairs[0][0].xLenght = 1;
            pairs[0][0].yLength = 1;
        }


        // by index 0 row
        for (int i = 1; i < matrix[0].length; i++) {
            if (matrix[0][i] == '1') {
                pairs[0][i].xLenght =  pairs[0][i-1].xLenght + 1;
                pairs[0][i].yLength = 1;
            }
        }

        // by 0 column
        for (int j = 1; j < matrix.length; j++) {
            if (matrix[j][0] == '1') {
                pairs[j][0].yLength = pairs[j-1][0].yLength + 1;
                pairs[j][0].xLenght = 1;
            }
        }


        for (int i = 1; i < matrix.length; i++) {
            for (int j = 1; j < matrix[0].length; j++) {
                if(matrix[i][j] == '1'){
                    pairs[i][j].xLenght = pairs[i][j-1].xLenght + 1;
                }
            }
        }

        for(int m = 1; m < matrix[0].length; m++){
            for(int n = 1; n < matrix.length; n++){
                if(matrix[n][m] == '1') {
                    pairs[n][m].yLength = pairs[n - 1][m].yLength + 1;
                }
            }
        }

        int[][] heightsMatrix = new int[matrix.length][matrix[0].length];

        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                heightsMatrix[i][j] = pairs[i][j].yLength;
            }
        }

        int maxArea = 0;
        for(int i = 0; i < matrix.length; i++){
           maxArea = Math.max(maxArea, largestRectangleArea(heightsMatrix[i]));
        }

        return  maxArea;
    }

    public char[][] bigData(){
        String[][] words ={{"1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1"},
        {"1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"0","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"0","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","1","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","1","1"},
        {"0","1","1","0","1","1","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","0","1"},
        {"0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","0","0","1","1","0","0","1","1","0","1","1","0","1","0","1","0","1"},
        {"1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","0","1","0","1","1","0","1","0","1","1"},
        {"1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","1"},
        {"1","1","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"1","0","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1"},
        {"1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"},
        {"1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"},
        {"1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","1","1","1","0","0","1","1","1","1","1"},
        {"1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"},
        {"1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1"},
        {"1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","1","1"},
        {"1","1","0","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"},
        {"1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1"},
        {"1","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","0","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1"},
        {"1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"},
        {"1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1"},
        {"1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","0","1","1","0","1","1"},
        {"1","1","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"1","1","0","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1"},
        {"1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"},
        {"0","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","0","1","0","1","1","0","1","1","1","1","1","1","1","1"},
        {"1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1"},
        {"1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1"},
        {"0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"},
        {"0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1"},
        {"0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","0","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","0","1","1"},
        {"1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0"},
        {"1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","0","1","1","1","1"},
        {"1","1","0","1","1","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","0","1","0","0"},
        {"0","1","1","0","1","1","1","1","1","1","1","0","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","0","1","1","0","1","1","1","0","1"}};

        char[][] result = new char[words.length][words[0].length];
        for(int i = 0; i < words.length; i++){
            for(int j = 0; j < words[0].length; j++){
                result[i][j] = words[i][j].charAt(0);
            }
        }
        return result;
    }


    @Test
    public  void  test(){
        /*char[][] matrix = {{'1','0','1','0','0'},
                {'1','0','1','1','1'},
                {'1','1','1','1','1'},
                {'1','0','0','1','0'}};*/
       /*char[][] matrix = {{'1','0','1','0'},
               {'1','0','1','1'},
               {'1','0','1','1'},
               {'1','1','1','1'}};*/

       /*char[][] matrix = {{'1','0','0','1','1','0','1','1'},{'1','0','0','0','0','1','0','0'},
               {'0','1','1','1','0','0','1','1'},{'0','0','0','1','0','0','0','1'},
               {'0','0','0','0','0','1','1','1'},{'1','1','1','1','1','1','1','1'},
               {'1','0','0','1','0','1','1','0'},{'0','1','1','0','1','1','1','0'}};*/

       char[][] matrix = bigData();

//       char[][] matrix = {{'1','1','1'},{'1','1','1'}};
//        char[][] matrix = {{'0','1'}};
//        char[][] matrix = {{'0','1'},{'0','1'}};

        int result = maximalRectangle1(matrix);
        System.out.println("result : " + result);
    }

}
